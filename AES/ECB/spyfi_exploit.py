'''
The problem is that ECB mode leaks which plaintext 
blocks are identical.

The idea is to make predictable blocks of text and
align them to leak 1 char from the flag at a time.
'''
from pwn import *
import string
import itertools
context(log_level='WARNING')

block_size = 16

def oracle(text):
    # p = process('spy_terminal_no_flag.py')
    p = remote('2018shell.picoctf.com', 33893)
    p.recvuntil('situation report: ')
    p.sendline(text)
    enc = p.recvline().strip()
    p.close()

    ciphers = []
    for i in range(0, len(enc), block_size*2):
        ciphers.append(enc[i:i+block_size*2])

    return ciphers


charset = string.printable
stain = 'fying code is: '
pad = 'B'*(block_size*4)
flag = ''
for ch in flag:
    stain = stain[1:] + ch 
pad = pad[len(flag):]

while True:
    for ch in charset:
        test = 'A'*27 + stain + ch + pad
        print(flag + ch)
        ciphers = oracle(test)
        if ciphers[5] == ciphers[11]:
            if ch == '}':
                exit()
            flag += ch
            stain = stain[1:] + ch  # rotate the stain
            pad = pad[1:]           # next flag char
            break

# picoCTF{@g3nt6_1$_th3_c00l3$t_6081670}
